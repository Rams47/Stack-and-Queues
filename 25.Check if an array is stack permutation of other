package fourfifty;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class ThreeOneSeven {
	
	private static boolean checkStackPermutation(int[] input, int[] output, int n) {
		
		Queue<Integer> ip = new LinkedList<Integer>();
		
		Queue<Integer> op = new LinkedList<Integer>();
		
		for(int i=0;i<n;i++) {
			ip.add(input[i]);
			op.add(output[i]);
		}
		
		Stack<Integer> st = new Stack<Integer>();
		
		while(!ip.isEmpty()) {
			int ele = ip.poll();
			
			if(ele == op.peek()) {
				op.poll();
				while(!st.isEmpty()) {
					if(st.peek() == op.peek()) {
						st.pop();
						op.poll();
					}
					else {
						break;
					}
				}
			}
			else {
				st.push(ele);
			}
		}
		
		
		
		return ip.isEmpty()&&st.isEmpty();
	}
	
	public static void main(String[] args)
    {
        int input[] = { 1, 2, 3 };
 
        int output[] = { 2, 1, 3 };
        int n = 3;
        if (checkStackPermutation(input, output, n))
            System.out.println("Possible");
        else
            System.out.println("Not Possible");
    }

	

}
